{
  "swagger": "2.0",
  "tags": [{
      "name": "Facts",
      "description": "All known fake facts"
    },
    {
      "name": "Sources",
      "description": "All known fake sources"
    }
  ],
  "host": "localhost:8080",
  "basePath": "/API",
  "schemes": ["http"],
  "paths": {
    "/Facts": {
      "get": {
        "tags": ["Facts"],
        "summary": "Get all facts from the database",
        "description": "Get request to retrieve all facts from the database",
        "operationId": "",
        "produces": "application/json",
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Fact"
            }
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": ["Facts"],
        "summary": "Adds a new facts to the database",
        "description": "Post request to add a new fact to the database",
        "operationId": "",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": "application/json",
        "parameters": [{
            "name": "statement",
            "in": "formData",
            "description": "Fact that is to be added",
            "required": true,
            "type": "string"
          },
          {
            "name": "popularity",
            "in": "formData",
            "description": "Popularity rating",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/FactPOST"
            }
          }
        },
        "security": [{
          "petstore_auth": ["write:pets", "read:pets"]
        }]
      },
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [{
          "in": "body",
          "name": "body",
          "description": "Pet object that needs to be added to the store",
          "required": true,
          "schema": {
            "$ref": "#/definitions/Pet"
          }
        }],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [{
          "petstore_auth": ["write:pets", "read:pets"]
        }]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": ["application/xml", "application/json"],
        "parameters": [{
          "name": "status",
          "in": "query",
          "description": "Status values that need to be considered for filter",
          "required": true,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["available", "pending", "sold"],
            "default": "available"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [{
          "petstore_auth": ["write:pets", "read:pets"]
        }]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "produces": ["application/xml", "application/json"],
        "parameters": [{
          "name": "tags",
          "in": "query",
          "description": "Tags to filter by",
          "required": true,
          "type": "array",
          "items": {
            "type": "string"
          },
          "collectionFormat": "multi"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [{
          "petstore_auth": ["write:pets", "read:pets"]
        }],
        "deprecated": true
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": ["application/xml", "application/json"],
        "parameters": [{
          "name": "petId",
          "in": "path",
          "description": "ID of pet to return",
          "required": true,
          "type": "integer",
          "format": "int64"
        }],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [{
          "api_key": []
        }]
      },

      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": ["application/xml", "application/json"],
        "parameters": [{
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [{
          "petstore_auth": ["write:pets", "read:pets"]
        }]
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": ["placed", "approved", "delivered"]
        },
        "complete": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Pet": {
      "type": "object",
      "required": ["name", "photoUrls"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": ["available", "pending", "sold"]
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "Fact": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "5ee08d65b9bd0cd05ed2a352"
        },
        "popularity": {
          "type": "integer",
          "example": "100"
        },
        "statement": {
          "type": "string",
          "example": "There is no moon"
        }
      }
    },
    "FactPOST": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Created fact successfully"
        },
        "createdFact": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "example": "5ee08d65b9bd0cd05ed2a352"
            },
            "popularity": {
              "type": "integer",
              "example": "100"
            },
            "statement": {
              "type": "string",
              "example": "There is no moon"
            }
          }
        },
        "statement": {
          "type": "string",
          "example": "There is no moon"
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  }
}